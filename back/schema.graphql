# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddExperienceInput {
  description: String!
  endDate: String
  startDate: String!
  title: String!
}

input AddImageInput {
  image: Upload!
  type: String!
}

type AddImageRes {
  image: String!
  ok: Boolean!
}

input AddProjectInput {
  content: String!
  coverImg: String!
  description: String!
  endDate: String
  githubUrl: String!
  isTemporary: Boolean = false
  startDate: String!
  title: String!
}

type AddSkillDto {
  ok: Boolean!
  skill: Skill!
}

input AddSkillInput {
  icon: String!
  name: String!
  type: SkillType!
}

type BasePostDTO {
  ok: Boolean!
  post: Post!
}

type CoreRes {
  ok: Boolean!
}

input CreatePostInput {
  category: String!
  content: String!
  coverImg: String!
  isTemporary: Boolean = false
  tags: [String!]!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteExperienceInput {
  _id: String!
}

input EditExperienceInput {
  _id: String!
  description: String!
  endDate: String
  startDate: String!
  title: String!
}

input EditPostInput {
  _id: String!
  addTags: [String!]!
  category: String!
  content: String!
  coverImg: String!
  deleteTags: [String!]!
  isTemporary: Boolean = false
  title: String!
}

input EditProjectInput {
  _id: String!
  content: String!
  coverImg: String!
  description: String!
  endDate: String
  githubUrl: String!
  isTemporary: Boolean = false
  startDate: String!
  title: String!
}

input EditSkillInput {
  _id: String!
  icon: String!
  name: String!
  type: SkillType!
}

type Experience {
  _id: String!
  createdAt: DateTime!
  description: String!
  endDate: String
  startDate: String!
  title: String!
  updatedAt: DateTime!
}

type ExperienceDto {
  experience: Experience!
  ok: Boolean!
}

type GetExperiencesDto {
  experiences: [Experience!]!
  ok: Boolean!
}

type GetPostDTO {
  ok: Boolean!
  post: Post!
  siblingPost: SiblingPost!
}

input GetPostInput {
  _id: String!
}

type GetPostsDTO {
  ok: Boolean!
  posts: [Post!]!
}

input GetPostsInput {
  category: String
  isTemporary: Boolean = false
  lastId: String
  limit: Float
  tag: String
  text: String
}

type GetProjectDto {
  ok: Boolean!
  project: Project!
}

type GetProjectsDto {
  ok: Boolean!
  projects: [Project!]!
}

input GetProjectsInput {
  isTemporary: Boolean = false
}

type GetSkillsDto {
  ok: Boolean!
  skills: GroupedSkills!
}

type GetTagRes {
  ok: Boolean!
  tag: Tag!
}

type GetTagsRes {
  ok: Boolean!
  tags: [Tag!]!
}

type GetUserInfoDTO {
  ok: Boolean!
  username: String!
}

type GroupedSkills {
  BACK_END: [Skill!]!
  DEV_OPS: [Skill!]!
  FRONT_END: [Skill!]!
}

type Mutation {
  addExperience(input: AddExperienceInput!): ExperienceDto!
  addImage(input: AddImageInput!): AddImageRes!
  addPost(input: CreatePostInput!): BasePostDTO!
  addProject(input: AddProjectInput!): GetProjectDto!
  addSkill(input: AddSkillInput!): AddSkillDto!
  deleteExperience(input: DeleteExperienceInput!): ExperienceDto!
  deletePost(input: GetPostInput!): CoreRes!
  deleteProject(input: ProjectInput!): CoreRes!
  deleteSkill(input: SkillInput!): AddSkillDto!
  editExperience(input: EditExperienceInput!): ExperienceDto!
  editPost(input: EditPostInput!): BasePostDTO!
  editProject(input: EditProjectInput!): GetProjectDto!
  editSkill(input: EditSkillInput!): AddSkillDto!
  refresh: CoreRes!
  signin(input: SigninInput!): SigninRes!
  signout: CoreRes!
}

type Post {
  _id: String!
  category: String!
  content: String!
  coverImg: String!
  createdAt: DateTime!
  isTemporary: Boolean
  tags: [Tag!]!
  title: String!
  updatedAt: DateTime!
}

type Project {
  _id: String!
  content: String!
  coverImg: String!
  createdAt: DateTime!
  description: String!
  endDate: String
  githubUrl: String!
  isTemporary: Boolean
  startDate: String!
  title: String!
  updatedAt: DateTime!
}

input ProjectInput {
  _id: String!
}

type Query {
  getExperiences: GetExperiencesDto!
  getPost(input: GetPostInput!): GetPostDTO!
  getPosts(input: GetPostsInput): GetPostsDTO!
  getProject(input: String!): GetProjectDto!
  getProjects(input: GetProjectsInput): GetProjectsDto!
  getSkills: GetSkillsDto!
  getTag(input: String!): GetTagRes!
  getTags: GetTagsRes!
  getUserInfo: GetUserInfoDTO!
}

type SiblingPost {
  next: Post
  prev: Post
}

input SigninInput {
  """User Password"""
  password: String!

  """User ID"""
  userId: String!
}

type SigninRes {
  ok: Boolean!
  username: String!
}

type Skill {
  _id: String!
  createdAt: DateTime!
  icon: String!
  name: String!
  type: SkillType!
  updatedAt: DateTime!
}

input SkillInput {
  _id: String!
}

enum SkillType {
  BACK_END
  DEV_OPS
  FRONT_END
}

type Tag {
  _id: String!
  createdAt: DateTime!
  name: String!
  posts: [Post!]!
  updatedAt: DateTime!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload